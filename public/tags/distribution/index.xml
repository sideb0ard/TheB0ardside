<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Distribution on The B0ardside </title>
    <link>http://theb0ardside.com:1313/tags/distribution/index.xml</link>
    <language>en-us</language>
    <author>Thorsten Sideb0ard</author>
    <rights>Copyleft (c) 1974 - The Future, Thorsten Sideb0ard; nae rights reserved.</rights>
    <updated>2012-04-03 00:00:00 &#43;0000 UTC</updated>
    
    <item>
      <title>Puppet stages and APT</title>
      <link>http://theb0ardside.com:1313/puppetstagesandapt</link>
      <pubDate>Tue, 03 Apr 2012 00:00:00 UTC</pubDate>
      <author>Thorsten Sideb0ard</author>
      <guid>http://theb0ardside.com:1313/puppetstagesandapt</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://www.stixrideshop.com/blog/wp-content/uploads/2012/03/gonz-3.bmp&#34; alt=&#34;gonz -- for no reason except he&amp;#039;s the MAN!&#34; /&gt;&lt;/p&gt;&lt;p&gt;At work, our old code deployment strategy was basically a wrapper script doing an svn checkout and some symlinking. With our move to Puppet for config management, we also moved to using Apt packaging for our code deployment, tying them together with a line similar to :&lt;/p&gt;&lt;p&gt;&lt;code&gt;class foo-export {&lt;br /&gt;    package { &amp;#039;foo-export&amp;#039;: ensure =&gt; latest }&lt;br /&gt;}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;So that whenever we deploy a new version of a package to our apt-repo, it can then be installed with a:&lt;/p&gt;&lt;p&gt;&lt;code&gt;puppet agent --test&lt;/code&gt;&lt;br /&gt;(and with an initial dry-run using &lt;code&gt;--noop&lt;/code&gt;)&lt;/p&gt;&lt;p&gt;( I should mention I manage our Puppet runs via our own distributed scripts, rather than having the nodes set up to check in every 30mins - when I&#39;m doing so much work on our Puppet setup and config, I&#39;d rather not having machines check in automatically in case the config is in a broken state )&lt;/p&gt;&lt;p&gt;Inevitably I would run the above Puppet command and it would not find any new packages, because &amp;#8216;d&#39;uh!&#39;, of course I still need to run an &lt;code&gt;apt-get update&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I&#39;ve been using Puppet stages for a while now, in order to group package installations in a broader sense rather than manually spelling out every dependency with a &lt;code&gt;require =&gt;&lt;/code&gt; stanza, so it was a simple addition to add in a &lt;code&gt;pre&lt;/code&gt; stage, and have the nodes run &lt;code&gt;apt-get update&lt;/code&gt; before any runs.&lt;/p&gt;&lt;p&gt;In order to use stages, you need to first define them in your site.pp. By default every defined class runs under Stage[main], so you just need to add the new stages and define the running order. (full Puppet stage documentation is &lt;a href=&#34;http://docs.puppetlabs.com/guides/language_guide.html&#34; title=&#34;Puppet Stages&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;At the top of my site.pp file, I added a pre and post stage, then define the execution order via:&lt;/p&gt;&lt;p&gt;&lt;code&gt;stage { [pre, post]: }&lt;br /&gt;Stage[pre] -&gt; Stage[main] -&gt; Stage[post]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Then I created a class called apt-hupdate (sorry, i use stupid naming conventions!) in&lt;br /&gt;&lt;code&gt;modules/apt-hupdate/manifests/init.pp&lt;/code&gt;&lt;/p&gt;&lt;p&gt;which contained:&lt;br /&gt;&lt;code&gt;class apt-hupdate {&lt;/p&gt;&lt;p&gt;    exec { &#34;aptHupdate&#34;:&lt;br /&gt;        command =&gt; &#34;/usr/bin/apt-get update&#34;,&lt;br /&gt;    }&lt;br /&gt;}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;And finally, include that in your site.pp with:&lt;/p&gt;&lt;p&gt;&lt;code&gt;class { apt-hupdate: stage =&gt; pre }&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Now every time you do a Puppet run, &lt;code&gt;apt-get update&lt;/code&gt; will be the first task run.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Like Treacle, Solving Perl Net::SFTP Slow Transfer Speeds</title>
      <link>http://theb0ardside.com:1313/liketreaclesolvingperlnetsftpslowtransferspeeds</link>
      <pubDate>Sun, 19 Feb 2012 00:00:00 UTC</pubDate>
      <author>Thorsten Sideb0ard</author>
      <guid>http://theb0ardside.com:1313/liketreaclesolvingperlnetsftpslowtransferspeeds</guid>
      <description>&lt;p&gt;I&#39;ve been trying to track down problems with really slow network transfer speeds between my servers and several DSPs. I knew it wasn&#39;t local I/O, as we could hit around 60Mb/s to some services, whereas the problematic ones were a sluggish 0.30Mb/s; I knew we weren&#39;t hitting our bandwidth limit, as cacti showed us daily peaks of only around 500Mb/s of our 600Mb/s line. &lt;/p&gt;&lt;p&gt;I was working with the network engineer on the other side, running tcpdump captures while uploading a file and analysing that in Wireshark&#39;s IO Graphs - stream looked absolutely fine, no lost packets, big non-changing tcp receive windows. We were pretty much stumped, and the other engineer recommend i look into &lt;a href=&#34;http://www.psc.edu/networking/projects/hpn-ssh/&#34;&gt;HPN-SSH&lt;/a&gt;, which does indeed sound very good, but first i started playing around with trying different ciphers and compression.&lt;/p&gt;&lt;p&gt;Our uploads are all run via a perl framework, which utilises Net::SFTP in order to do the transfers.&lt;a href=&#34;https://github.com/sideb0ard/speedTester&#34; target=&#34;_blank&#34;&gt; My test program was also written in perl&lt;/a&gt; and using the same library. In order to try different cyphers i started testing uploads with the interactive command line SFTP. Boom! 6Mb/s upload speed. Biiiig difference from the Net::SFTP client. I started playing with blowfish cipher and trying to enable compression with Net::SFTP - it wasn&#39;t really working, it can only do Zlib compression, which my SSHD server wouldn&#39;t play with until i specifically enabled compression in the sshd_config file.&lt;/p&gt;&lt;p&gt;After much more digging around, i came across reference to &lt;a href=&#34;http://search.cpan.org/~salva/Net-SFTP-Foreign-1.69/lib/Net/SFTP/Foreign.pm&#34;&gt;Net::SFTP::Foreign&lt;/a&gt;, which uses the installed ssh binary on your system for transport rather than relying on the pure perl Net::SSH.&lt;/p&gt;&lt;p&gt;Syntax is very similar, so it was a minor rewrite to switch modules, yet such a massive payback, from 0.30Mb/s up to 6Mb/s. &lt;/p&gt;&lt;p&gt;(It turns out the DSPs i mentioned earlier who could achieve 60Mb/s were actually FTP transfers, not SFTP)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
