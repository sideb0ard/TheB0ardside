<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on The B0ardside</title>
    <link>http://theb0ardside.com/tags/java/</link>
    <description>Recent content in java on The B0ardside</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 Dec 2013 00:00:00 +0000</lastBuildDate><atom:link href="http://theb0ardside.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Troubleshooting the JVM at Twitter</title>
      <link>http://theb0ardside.com/troubleshootingjvmtwitter/</link>
      <pubDate>Mon, 09 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://theb0ardside.com/troubleshootingjvmtwitter/</guid>
      <description>This talk is incredibly informative - Twitter have their own fork of OpenJDK, in which they have enabled registers on the CPU, normally used by the Java Compiler - this enables Frame Pointers which perf can read and translate, enabling a full Stack trace from JVM bytecode right down into the kernel.
Beyond simply CPU counters and stack trace, they also tie in other JVM flags which export DTrace counters, and use these to construct connections between memory allocation and the running process, so in the end you have a tool which can spans JVM -&amp;gt; kernel connections, alongside CPU -&amp;gt; memory.</description>
    </item>
    
    <item>
      <title>JVM and GC Performance Tuning</title>
      <link>http://theb0ardside.com/jvmandgcperformancetuning/</link>
      <pubDate>Thu, 03 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://theb0ardside.com/jvmandgcperformancetuning/</guid>
      <description>Been working a lot of JVM GC performance problems of late, so this video interview my friend Johan turned me on has some great info -Attila Szegedi on JVM and GC Performance Tuning at Twitter.
http://www.infoq.com/interviews/szegedi-performance-tuning</description>
    </item>
    
    <item>
      <title>JVM tuning for VMs</title>
      <link>http://theb0ardside.com/jvmtuningforvms/</link>
      <pubDate>Fri, 13 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://theb0ardside.com/jvmtuningforvms/</guid>
      <description>This is an excellent talk about the interaction between the various layers of memory abstraction from the a machine&#39;s physical memory down through the Hypervisor&#39;s view, to the Guest OS&#39;s and down into the JVM:

// found via Marakana //</description>
    </item>
    
  </channel>
</rss>
