<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Perl on The B0ardside </title>
    <link>http://theb0ardside.com/tags/perl/</link>
    <language>en-us</language>
    <author>Thorsten Sideb0ard</author>
    <rights>Copyleft (c) 1974 - The Future, Thorsten Sideb0ard; nae rights reserved.</rights>
    <updated>2015-08-01 00:00:00 &#43;0000 UTC</updated>
    
    <item>
      <title>Perl and Portaudio</title>
      <link>http://theb0ardside.com/algorithmicsoundperl/</link>
      <pubDate>Sat, 01 Aug 2015 00:00:00 UTC</pubDate>
      <author>Thorsten Sideb0ard</author>
      <guid>http://theb0ardside.com/algorithmicsoundperl/</guid>
      <description>&lt;p&gt;Super nice demo of algorithmic sound generation with Perl and Portaudio&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;video-container&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/pMZ4ilLzKW8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;from &lt;a href=&#34;http://thelackthereof.org/NoiseGen&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Like Treacle, Solving Perl Net::SFTP Slow Transfer Speeds</title>
      <link>http://theb0ardside.com/liketreaclesolvingperlnetsftpslowtransferspeeds/</link>
      <pubDate>Sun, 19 Feb 2012 00:00:00 UTC</pubDate>
      <author>Thorsten Sideb0ard</author>
      <guid>http://theb0ardside.com/liketreaclesolvingperlnetsftpslowtransferspeeds/</guid>
      <description>&lt;p&gt;I&#39;ve been trying to track down problems with really slow network transfer speeds between my servers and several DSPs. I knew it wasn&#39;t local I/O, as we could hit around 60Mb/s to some services, whereas the problematic ones were a sluggish 0.30Mb/s; I knew we weren&#39;t hitting our bandwidth limit, as cacti showed us daily peaks of only around 500Mb/s of our 600Mb/s line. &lt;/p&gt;&lt;p&gt;I was working with the network engineer on the other side, running tcpdump captures while uploading a file and analysing that in Wireshark&#39;s IO Graphs - stream looked absolutely fine, no lost packets, big non-changing tcp receive windows. We were pretty much stumped, and the other engineer recommend i look into &lt;a href=&#34;http://www.psc.edu/networking/projects/hpn-ssh/&#34;&gt;HPN-SSH&lt;/a&gt;, which does indeed sound very good, but first i started playing around with trying different ciphers and compression.&lt;/p&gt;&lt;p&gt;Our uploads are all run via a perl framework, which utilises Net::SFTP in order to do the transfers.&lt;a href=&#34;https://github.com/sideb0ard/speedTester&#34; target=&#34;_blank&#34;&gt; My test program was also written in perl&lt;/a&gt; and using the same library. In order to try different cyphers i started testing uploads with the interactive command line SFTP. Boom! 6Mb/s upload speed. Biiiig difference from the Net::SFTP client. I started playing with blowfish cipher and trying to enable compression with Net::SFTP - it wasn&#39;t really working, it can only do Zlib compression, which my SSHD server wouldn&#39;t play with until i specifically enabled compression in the sshd_config file.&lt;/p&gt;&lt;p&gt;After much more digging around, i came across reference to &lt;a href=&#34;http://search.cpan.org/~salva/Net-SFTP-Foreign-1.69/lib/Net/SFTP/Foreign.pm&#34;&gt;Net::SFTP::Foreign&lt;/a&gt;, which uses the installed ssh binary on your system for transport rather than relying on the pure perl Net::SSH.&lt;/p&gt;&lt;p&gt;Syntax is very similar, so it was a minor rewrite to switch modules, yet such a massive payback, from 0.30Mb/s up to 6Mb/s. &lt;/p&gt;&lt;p&gt;(It turns out the DSPs i mentioned earlier who could achieve 60Mb/s were actually FTP transfers, not SFTP)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>building a DEB package from a perl script</title>
      <link>http://theb0ardside.com/buildingadebpackagefromaperlscript/</link>
      <pubDate>Thu, 16 Feb 2012 00:00:00 UTC</pubDate>
      <author>Thorsten Sideb0ard</author>
      <guid>http://theb0ardside.com/buildingadebpackagefromaperlscript/</guid>
      <description>&lt;p&gt;I have a speedtest perl script i wrote - nothing complicated, takes a file and uploads it to a remote FTP or SFTP server, while calculating how long, then gives you a a measure of the MB/per second bandwidth between two sites.&lt;/p&gt;&lt;p&gt;I want it available on a selection of machines so it can run from wherever, so I thought i&#39;d package it up as a .DEB file and stick it in our local repo. Nothing complicated in that, and there are a &lt;a href=&#34;http://www.debian-administration.org/articles/336&#34; target=&#34;_blank&#34;&gt;number&lt;/a&gt; of &lt;a href=&#34;http://www.debian-administration.org/articles/337&#34; target=&#34;_blank&#34;&gt;online&lt;/a&gt; &lt;a href=&#34;http://www.debian.org/doc/manuals/debian-faq/ch-pkg_basics.en.html&#34; target=&#34;_blank&#34;&gt;tutorials&lt;/a&gt; about building your own debs. The main drawback with most I found was that they assume you are actually building from source rather than just distributing a script, although I also found &lt;a href=&#34;http://askubuntu.com/questions/27715/create-a-deb-package-from-scripts-or-binaries&#34; target=&#34;_blank&#34;&gt;a relevant Ubuntu thread&lt;/a&gt; which is pretty simple and to the point.&lt;/p&gt;&lt;p&gt;However, even using these tutorials it still took me a few hours to figure out. There are just a couple of non-obvious points, so i figure writing out my own steps is worth recording -&lt;/p&gt;&lt;p&gt;So first, grab your required packages:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;apt-get install dh-make dpkg-dev debhelper devscripts fakeroot lintian&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;You will need to build from a directory with the name of your script in the form &lt;code&gt;packagename-version&lt;/code&gt;, so for mine i created &lt;strong&gt;/tmp/speedtest-1.0&lt;/strong&gt;, then copied in my script &amp;#8216;&lt;strong&gt;speedtest&lt;/strong&gt;&amp;#8216; and it&#39;s data file &lt;strong&gt;25MBFLAC.file&lt;/strong&gt; ( which i could have created with &lt;strong&gt;dd&lt;/strong&gt; on the box rather than copy over, but downloading the file is actually quicker in this situation ).&lt;/p&gt;&lt;p&gt;The first step is to run:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;dh_make -s --indep --createorig -e thor@valhalla.com&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;(dash-s means create a single binary .deb - i.e. no source version; indep means architecture-independent; and createorig is to indicate you are the original maintainer)&lt;/p&gt;&lt;p&gt;this creates a top-level &amp;#8216;&lt;strong&gt;debian&lt;/strong&gt;&amp;#8216; directory containing all the necessary config files.&lt;br /&gt;The main one you need to edit is &lt;strong&gt;debian/control&lt;/strong&gt; - you prob only need fill in &amp;#8220;section&amp;#8221;, &amp;#8220;homepage&amp;#8221; and &amp;#8220;Description&amp;#8221;&lt;/p&gt;&lt;p&gt;Mine looks like:&lt;/p&gt;&lt;p&gt;&lt;code&gt;Source: speedtest&lt;br /&gt;Section: web&lt;br /&gt;Priority: extra&lt;br /&gt;Maintainer: Thorsten Sideboard &amp;lt;thor@valhalla.com&amp;gt;&lt;br /&gt;Build-Depends: debhelper (&gt;= 7.0.50~)&lt;br /&gt;Standards-Version: 3.8.4&lt;br /&gt;Homepage: http://github.com/sideboard/speedtest.git&lt;/p&gt;&lt;p&gt;Package: speedtest&lt;br /&gt;Architecture: all&lt;br /&gt;Depends: ${misc:Depends}&lt;br /&gt;Description: Test Upload Speeds&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;One of the things which baffled me for a while, which was answered in the &lt;a href=&#34;http://askubuntu.com/questions/27715/create-a-deb-package-from-scripts-or-binaries&#34; target=&#34;_blank&#34;&gt;askubuntu link above&lt;/a&gt;, was how to specify where something is installed &amp;#8212; it goes in a file &amp;#8216;&lt;strong&gt;debian/install&lt;/strong&gt;&amp;#8216; which isn&#39;t created for you. The format of the file is &amp;#8216;&lt;strong&gt;filename location/to/be/installed&lt;/strong&gt;&amp;#8221; (without the initial slash)&lt;/p&gt;&lt;p&gt;so in my case, i ran:&lt;br /&gt;&lt;code&gt;echo &#34;speedtest usr/local/Scriptz/&#34; &gt; debian/install&lt;br /&gt;echo &#34;25MBFLAC.file usr/local/Scriptz/&#34; &gt;&gt; debian/install&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;At this point, you should then be able to run:&lt;br /&gt;&lt;code&gt;debuild -us -uc&lt;/code&gt;&lt;/p&gt;&lt;p&gt;and you &lt;em&gt;should&lt;/em&gt; have a deb file built. but..&lt;/p&gt;&lt;p&gt;First i ran into :&lt;/p&gt;&lt;p&gt;&lt;code&gt;dpkg-source: error: can&amp;#039;t build with source format &amp;#039;3.0 (quilt)&amp;#039;: no orig.tar file found&lt;/code&gt;&lt;/p&gt;&lt;p&gt;As the above-mentioned askubuntu post says, you can &lt;/p&gt;&lt;p&gt;&lt;code&gt;echo &#34;1.0&#34; &gt; debian/source/format&lt;/code&gt;&lt;/p&gt;&lt;p&gt;then re-running the &lt;code&gt;debuild -us -uc&lt;/code&gt; i ran into &lt;/p&gt;&lt;p&gt;&lt;code&gt;dpkg-source: error: cannot represent change to speedtemp-1.0/25MBFLAC.file: binary file contents changed&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This error is due to leftover build-cruft from my last run - if you check the directory one step up from where you are, you&#39;ll see debuild has already built some files for you, typically a tar.gz, a .dsc and a .build file. Delete all them, then re-run &lt;code&gt;debuild -us -uc&lt;/code&gt; &amp;#8212; now it should build properly!&lt;/p&gt;&lt;p&gt;ah! &lt;/p&gt;&lt;p&gt;&lt;code&gt;dh_usrlocal: debian/speedtemp/usr/local/Scriptz/speedtest is not a directory&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This one also caught me out for a while - turns out this is caused by my specifying &amp;#8220;/usr/local/Scriptz&amp;#8221; as my install location - &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Most third-party software installs itself in the /usr/local directory hierarchy. On Debian this is reserved for private use by the system administrator, so packages must not use directories such as /usr/local/bin but should instead use system directories such as /usr/bin, obeying the Filesystem Hierarchy Standard (FHS).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt; (from &lt;a href=&#34;http://www.debian.org/doc/manuals/maint-guide/modify.en.html#destdir&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;So, yeah, i changed my &lt;strong&gt;debian/install&lt;/strong&gt; file to be &amp;#8220;&lt;strong&gt;speedtest usr/bin&lt;/strong&gt;&amp;#8221;&lt;/p&gt;&lt;p&gt;and finally! running &lt;code&gt;debuild -us -uc&lt;/code&gt; completes properly, outputting a &lt;strong&gt;/tmp/speedtest_1.0-1_all.deb&lt;/strong&gt; which can then be installed via&lt;br /&gt;&lt;strong&gt;&lt;code&gt;dpkg -i /tmp/speedtest_1.0-1_all.deb &lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;One last note &amp;#8212; there are four useful scripts to also know about &amp;#8212; &lt;strong&gt;&lt;code&gt;preinst, postinst, prerm, postrm&lt;/code&gt;&lt;/strong&gt; &amp;#8212; these should be in the &lt;code&gt;debian/&lt;/code&gt; directory - pretty self-explanatory - pre- and post- install and remove scripts - if these exist, they will be run exactly as they are named, so for example, i wanted my 25MBFLAC.file still to be installed under /usr/local/Scriptz, so i listed it to be installed in the debian/install file as &amp;#8220;25MBFLAC.file tmp&amp;#8221; and then in my postinst file, i added:&lt;/p&gt;&lt;p&gt;&lt;code&gt;#!/bin/sh&lt;br /&gt;mv /tmp/25MBFLAC.file /usr/local/Scriptz/&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>a moose loose aboot this hoose</title>
      <link>http://theb0ardside.com/amooselooseabootthishoose/</link>
      <pubDate>Tue, 24 Jan 2012 00:00:00 UTC</pubDate>
      <author>Thorsten Sideb0ard</author>
      <guid>http://theb0ardside.com/amooselooseabootthishoose/</guid>
      <description>&lt;p&gt;Really enjoyed programming along with this &lt;a href=&#34;http://www.linuxjournal.com/content/moose&#34; title=&#34;moose&#34; target=&#34;_blank&#34;&gt;perl Moose introduction at Linux Journal&lt;/a&gt; - The piece and code are nice and concise.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://www.linuxjournal.com/files/linuxjournal.com/ufiles/imagecache/node-page/nodeimage/story/moose.png&#34; alt=&#34;Moose&#34; /&gt; &lt;img src=&#34;http://www.linuxjournal.com/files/linuxjournal.com/ufiles/logo-lj.jpg&#34; alt=&#34;lj&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CPAN Diff script</title>
      <link>http://theb0ardside.com/cpandiffscript/</link>
      <pubDate>Fri, 16 Dec 2011 00:00:00 UTC</pubDate>
      <author>Thorsten Sideb0ard</author>
      <guid>http://theb0ardside.com/cpandiffscript/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://theslowbullet.files.wordpress.com/2011/01/clonecover.jpg&#34; alt=&#34;diff&#34; /&gt;&lt;/p&gt;&lt;p&gt;I put together a quick perl script for comparing installed CPAN modules between two hosts. Find it &lt;a href=&#34;https://github.com/sideb0ard/CPANDiff&#34; title=&#34;CPANDiff&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Quite easy to use:&lt;br /&gt;Usage: ./CompareHostCpanModules.pl login@host1 login@host2&lt;/p&gt;&lt;p&gt;The script ssh&#39;s into both hosts (so it&#39;s easier if you have your ssh-keys setup) and grabs a list of installed CPAN modules and versions, then outputs the differences - it returns two lists - one of modules installed but having different versions, and another list of modules missing from the second host. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gen Xen</title>
      <link>http://theb0ardside.com/genxen/</link>
      <pubDate>Mon, 10 Oct 2011 00:00:00 UTC</pubDate>
      <author>Thorsten Sideb0ard</author>
      <guid>http://theb0ardside.com/genxen/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;&#34; width=&#34;600&#34; src=&#34;http://www.just-marvel-x-men.com/image-files/astonishing-x-men-1-100k.jpg&#34; title=&#34;Xen&#34; class=&#34;alignnone&#34;  /&gt;&lt;/p&gt;&lt;p&gt;I&#39;ve been working pretty extensively with Xen and Puppet in my new job, really loving it! I&#39;ve been creating a whole load of Xen hosts, most of which are cloned from an initial image I built using Xen-tools. I&#39;ve just finished a script which is over on &lt;a href=&#34;https://github.com/sideb0ard/GenXen&#34; title=&#34;GitHub&#34; target=&#34;_blank&#34;&gt;my github page&lt;/a&gt;, which basically automates what was previously a manual process.&lt;/p&gt;&lt;p&gt;Basically, it copies your existing disk.img and swap.img, generates a new xen.cfg file based on some interactive input (desired hostname, IP, memory and number of vCPUs) plus a random Xen mac address, then mounts the disk.img file and changes some appropriate system files - /etc/hostname, hosts, and network/interfaces.&lt;/p&gt;&lt;p&gt;All quite simple and straight forward, but quite nice to have automated.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/sideb0ard/GenXen&#34; title=&#34;GenXen&#34; target=&#34;_blank&#34;&gt;GenXen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Here&#39;s the README:&lt;/p&gt;&lt;p&gt;GenXen #&lt;br /&gt;#############################&lt;/p&gt;&lt;p&gt;A script for automating Xen VM deployment.&lt;/p&gt;&lt;p&gt;It requires that you have a base disk.img and swap.img already created.&lt;br /&gt;I created mine with:&lt;br /&gt;xen-create-image -pygrub -size=50Gb -swap=9Gb -vcpus=2 -memory 6Gb -dist=squeeze -dhcp -passwd -dir=/var/virt-machines -hostname=xen-squeeze-base&lt;/p&gt;&lt;p&gt;Fill in some of the variables at the top of GenXen.pl before running, then simply:&lt;br /&gt;./GenXen.pl&lt;/p&gt;&lt;p&gt;The interactive part will ask for hostname, memory size, vCPUs, IP address, then generate a unique Xen mac address, and write these all to a xen config file which will be saved in /etc/xen/&lt;/p&gt;&lt;p&gt;It&#39;ll copy your disk.img and swap.img to destination dir, mount the disk.img and create appropriate files for:&lt;br /&gt;/etc/hostname&lt;br /&gt;/etc/hosts&lt;br /&gt;/etc/network/interfaces &lt;/p&gt;&lt;p&gt;After that you should be good to launch with:&lt;/p&gt;&lt;p&gt;xm create -c /etc/xen/whatever-your-hostname-is.cfg&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
